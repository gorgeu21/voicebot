"""
Telegram bot logic and message handlers
Handles voice messages, user interactions, and bot commands
"""
import logging
from typing import Dict, Any
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import BOT_TOKEN
from transcriber import transcribe_voice_message
from summarizer import generate_summary, extract_action_items, format_transcript

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# In-memory storage for user sessions (in production, use Redis or database)
user_sessions: Dict[int, Dict[str, Any]] = {}

# Maximum message length for Telegram (4096 characters)
MAX_MESSAGE_LENGTH = 4000

def split_long_message(text: str, max_length: int = MAX_MESSAGE_LENGTH) -> list:
    """Split long message into chunks that fit Telegram's limit"""
    if len(text) <= max_length:
        return [text]
    
    chunks = []
    current_chunk = ""
    
    for line in text.split('\n'):
        if len(current_chunk) + len(line) + 1 <= max_length:
            current_chunk += line + '\n'
        else:
            if current_chunk:
                chunks.append(current_chunk.strip())
            current_chunk = line + '\n'
    
    if current_chunk:
        chunks.append(current_chunk.strip())
    
    return chunks

def create_action_buttons() -> InlineKeyboardMarkup:
    """Create inline keyboard with action buttons"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ (–ø–æ —Ä–æ–ª—è–º)",
            callback_data="action_summary"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–æ —Ä–æ–ª—è–º)",
            callback_data="action_fulltext"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –í—ã–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏",
            callback_data="action_tasks"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="action_stats"
        )
    )
    
    return builder.as_markup()

def create_processing_keyboard() -> InlineKeyboardMarkup:
    """Create keyboard shown during processing"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...",
            callback_data="processing"
        )
    )
    return builder.as_markup()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """Handle /start command"""
    welcome_text = """üéôÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Voice Bot!**

–Ø —É–º–µ—é:
‚Ä¢ üéµ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ üìä –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–æ–ª—è–º
‚Ä¢ ‚úÖ –í—ã–¥–µ–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ üìù –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
2. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–≤–æ—Ä—è—â–∏—Ö.

*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!*"""
    
    await message.answer(welcome_text, parse_mode="Markdown")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """Handle /help command"""
    help_text = """‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–π —Å–µ—Å—Å–∏–∏

**–§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ **–û–±—â–∞—è —Å–≤–æ–¥–∫–∞** - –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
‚Ä¢ **–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç** - –í—Å—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –≥–æ–≤–æ—Ä—è—â–∏—Ö
‚Ä¢ **–í—ã–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏** - –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø–æ—Ä—É—á–µ–Ω–∏–π
‚Ä¢ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—Å—Ç–µ

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: 20 –ú–ë
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: OGG, MP3, WAV
‚Ä¢ –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: –†—É—Å—Å–∫–∏–π

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """Handle /stats command"""
    user_id = message.from_user.id
    session = user_sessions.get(user_id, {})
    
    stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–π —Å–µ—Å—Å–∏–∏**

‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {session.get('messages_processed', 0)}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {session.get('last_activity', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è' if session.get('current_text') else '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏'}

*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!*"""
    
    await message.answer(stats_text, parse_mode="Markdown")

@dp.message(types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    """Handle voice messages"""
    user_id = message.from_user.id
    
    try:
        # Send processing message
        processing_msg = await message.reply(
            "üéôÔ∏è **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...**\n\n‚è≥ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ...",
            parse_mode="Markdown",
            reply_markup=create_processing_keyboard()
        )
        
        # Get voice file info
        voice = message.voice
        logger.info(f"Received voice message: duration={voice.duration}s, size={voice.file_size} bytes")
        
        # Download voice file
        file = await bot.get_file(voice.file_id)
        file_bytes = await bot.download_file(file.file_path)
        
        # Update processing message
        await processing_msg.edit_text(
            "üéôÔ∏è **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...**\n\nüîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...",
            parse_mode="Markdown",
            reply_markup=create_processing_keyboard()
        )
        
        # Transcribe audio
        transcription_result = await transcribe_voice_message(file_bytes, f"voice_{voice.file_id}.ogg")
        
        if not transcription_result["success"]:
            error_text = f"‚ùå **–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:**\n\n{transcription_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            await processing_msg.edit_text(error_text, parse_mode="Markdown")
            return
        
        # Store transcription in user session
        if user_id not in user_sessions:
            user_sessions[user_id] = {}
        
        user_sessions[user_id].update({
            'current_text': transcription_result['processed_text'],
            'raw_text': transcription_result['text'],
            'last_activity': message.date.strftime("%Y-%m-%d %H:%M:%S"),
            'messages_processed': user_sessions[user_id].get('messages_processed', 0) + 1,
            'duration': transcription_result.get('duration', 0),
            'segments': transcription_result.get('segments', [])
        })
        
        # Success message with action buttons
        success_text = f"""‚úÖ **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!**

üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration} —Å–µ–∫.
‚Ä¢ –†–∞–∑–º–µ—Ä: {round(voice.file_size / 1024, 1)} –ö–ë
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {len(transcription_result['processed_text'])}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"""
        
        await processing_msg.edit_text(
            success_text,
            parse_mode="Markdown",
            reply_markup=create_action_buttons()
        )
        
        logger.info(f"Voice message processed successfully for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error processing voice message: {str(e)}")
        await processing_msg.edit_text(
            f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:**\n\n{str(e)}\n\n*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.*",
            parse_mode="Markdown"
        )

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    """Handle inline button callbacks"""
    user_id = callback.from_user.id
    action = callback.data
    
    # Ignore processing button clicks
    if action == "processing":
        await callback.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
        return
    
    # Get user session
    session = user_sessions.get(user_id)
    if not session or not session.get('current_text'):
        await callback.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return
    
    try:
        # Show processing
        await callback.message.edit_text(
            f"‚è≥ **–í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ...**\n\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...",
            parse_mode="Markdown"
        )
        
        text = session['current_text']
        
        if action == "action_summary":
            # Generate summary
            result = await generate_summary(text)
            
            if result["success"]:
                response_text = f"üìä **–û–ë–©–ê–Ø –°–í–û–î–ö–ê**\n\n{result['content']}"
                action_name = "–°–≤–æ–¥–∫–∞ –≥–æ—Ç–æ–≤–∞!"
            else:
                response_text = f"‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏:**\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                action_name = "–û—à–∏–±–∫–∞ —Å–≤–æ–¥–∫–∏"
                
        elif action == "action_fulltext":
            # Format full text
            result = await format_transcript(text)
            
            if result["success"]:
                response_text = result['content']
                action_name = "–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤!"
            else:
                response_text = f"‚ùå **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                action_name = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                
        elif action == "action_tasks":
            # Extract tasks
            result = await extract_action_items(text)
            
            if result["success"]:
                response_text = result['content']
                action_name = "–ó–∞–¥–∞—á–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã!"
            else:
                response_text = f"‚ùå **–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á:**\n\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                action_name = "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á"
                
        elif action == "action_stats":
            # Show text statistics
            from summarizer import processor
            stats = processor.get_text_stats(text)
            
            response_text = f"""üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–ö–°–¢–ê**

üìä **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {stats['characters']:,}
‚Ä¢ –°–ª–æ–≤: {stats['words']:,}
‚Ä¢ –°—Ç—Ä–æ–∫: {stats['lines']:,}
‚Ä¢ –ì–æ–≤–æ—Ä—è—â–∏—Ö: {stats['speakers_detected']}
‚Ä¢ –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: ~{stats['estimated_reading_time']} –º–∏–Ω.

üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ:**
‚Ä¢ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞: {'‚úÖ –î–∞' if stats['within_limits'] else '‚ùå –ù–µ—Ç'}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {session.get('duration', 0):.1f} —Å–µ–∫.
‚Ä¢ –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(session.get('segments', []))}"""
            
            action_name = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ—Ç–æ–≤–∞!"
        else:
            response_text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
            action_name = "–û—à–∏–±–∫–∞"
        
        # Split long messages
        message_chunks = split_long_message(response_text)
        
        # Send first chunk as edit, others as new messages
        await callback.message.edit_text(
            message_chunks[0],
            parse_mode="Markdown",
            reply_markup=create_action_buttons()
        )
        
        # Send additional chunks if needed
        for chunk in message_chunks[1:]:
            await callback.message.reply(chunk, parse_mode="Markdown")
        
        await callback.answer(action_name)
        
        logger.info(f"Action {action} completed for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error handling callback {action}: {str(e)}")
        await callback.message.edit_text(
            f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è:**\n\n{str(e)}",
            parse_mode="Markdown",
            reply_markup=create_action_buttons()
        )
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@dp.message()
async def handle_other_messages(message: types.Message):
    """Handle all other messages"""
    await message.reply(
        "üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
        parse_mode="Markdown"
    )

# Error handler
@dp.error()
async def error_handler(event, exception):
    """Global error handler"""
    logger.error(f"Bot error: {exception}")
    return True

# Export bot and dispatcher for main.py
__all__ = ['bot', 'dp']
