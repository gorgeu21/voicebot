"""
Configuration module for Telegram Voice Bot
Loads environment variables and provides configuration settings
"""
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Telegram Bot Configuration
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required")

# Webhook Configuration
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
if not WEBHOOK_URL:
    raise ValueError("WEBHOOK_URL environment variable is required")

# OpenAI Configuration
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable is required")

# Application Configuration
APP_HOST = os.getenv("APP_HOST", "0.0.0.0")
APP_PORT = int(os.getenv("PORT", "8000"))  # Railway, Render use PORT env var

# Audio Processing Configuration
MAX_AUDIO_SIZE_MB = int(os.getenv("MAX_AUDIO_SIZE_MB", "20"))  # 20MB default
MAX_TEXT_LENGTH = int(os.getenv("MAX_TEXT_LENGTH", "4000"))  # 4000 chars default

# OpenAI Model Configuration
TRANSCRIPTION_MODEL = os.getenv("TRANSCRIPTION_MODEL", "whisper-1")
CHAT_MODEL = os.getenv("CHAT_MODEL", "gpt-4o-mini")
TEMPERATURE = float(os.getenv("TEMPERATURE", "0.2"))

# Webhook validation
if WEBHOOK_URL and not WEBHOOK_URL.startswith("https://"):
    raise ValueError("WEBHOOK_URL must use HTTPS protocol")

print(f"‚úÖ Configuration loaded successfully")
print(f"üìç Webhook URL: {WEBHOOK_URL}")
print(f"ü§ñ Chat Model: {CHAT_MODEL}")
print(f"üé§ Transcription Model: {TRANSCRIPTION_MODEL}")